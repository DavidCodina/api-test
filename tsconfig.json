{
  "compilerOptions": {
    "target": "ESNEXT",
    "baseUrl": "src",
    // I'm using tsc-alias because tsconfig-paths didn't work for me. You may run into issues with jest:
    // https://medium.com/@fmoessle/typescript-paths-with-ts-node-ts-node-dev-and-jest-671deacf6428
    "paths": {
      "functions/*": ["functions/*"]
    },
    "strict": true,
    "allowJs": true,
    // Report errors in .js files.
    "checkJs": false,
    "removeComments": true,
    "allowSyntheticDefaultImports": true,

    "module": "commonjs",
    //# ??? "moduleResolution": "node",
    "outDir": "./dist",
    "sourceMap": true,

    // See Mike North intermediate typescript for why you might not want to do this.
    // This may be needed for imports like import fs from 'fs' when module and
    // moduleResolution are not using "NodeNext". However, for now it seems to
    // be okay to omit it.
    "esModuleInterop": true,

    // Probably better just to omit this all together.
    // By default all visible ”@types” packages are included in your compilation.
    // Packages in node_modules/@types of any enclosing folder are considered visible.
    // For example, that means packages within ./node_modules/@types/, ../node_modules/@types/, ../../node_modules/@types/, and so on.
    // "types": ["node", "jest", "express"],
    "forceConsistentCasingInFileNames": true,
    "skipLibCheck": true
  },
  "include": ["src/**/*"],
  "exclude": [
    "node_modules/**/*",
    ".serverless/**/*",
    ".webpack/**/*",
    "_warmup/**/*",
    ".vscode/**/*",
    "**/*.test.*",
    "**/*.spec.*",
    "__tests__"
  ]
}
