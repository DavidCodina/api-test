# The name of this file can be anyting but needs to be .yml
name: Lint, Test, Build, Deploy

# Whenever someone pushes to branch main then run the following job.
on:
  # https://docs.github.com/en/actions/using-workflows
  # https://docs.github.com/en/actions/using-workflows/events-that-trigger-workflows
  # https://docs.github.com/en/actions/using-workflows/events-that-trigger-workflows#pull_request

  #--------------------------------------------------------------------------
  #
  # Note:
  #
  # https://www.udemy.com/course/github-actions-the-complete-guide/learn/lecture/34138630#overview
  # Pull Request from contributors that forked will not occur automatically, but instead require approval.
  # Why? Because obviously you don't want to automatically deploy from forked users.
  # By default, pull requests based on forks do not trigger workflows.
  # First-time contributors must be approved manually. Subsequent PRs will be triggered
  # automatically. That said, if you add a collaborator and they do a first PR, it will
  # trigger automatially on the first time.
  #
  #--------------------------------------------------------------------------
  pull_request:
    branches:
      - main
      - master
      - development # 'dev*'
      - dev
  workflow_dispatch:
jobs:
  lint: # The name of job is arbitrary.
    # The actual name used here is important because it allows us to search for
    # the correct status check when Requiring status checks to pass before merging.
    # This is set up in GitHub branch --> Settings --> Branches.
    name: Lint
    runs-on: ubuntu-latest
    strategy:
      matrix:
        node-version: [18.x]
    steps:
      # https://github.com/marketplace/actions/checkout
      # https://github.com/actions/checkout
      - uses: actions/checkout@v3
      - name: Use Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v3
        with:
          node-version: ${{ matrix.node-version }}
      # - name: Install Dependencies
      #   run: npm ci
      # - name: Build Project
      #   run: npm run build
      - name: Lint src
        run: npm run lint

  test:
    name: Test
    runs-on: ubuntu-latest
    strategy:
      matrix:
        node-version: [18.x]
    steps:
      - uses: actions/checkout@v3
      - name: Use Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v3
        with:
          node-version: ${{ matrix.node-version }}
      # - name: Install Dependencies
      #   run: npm ci
      # - name: Build Project
      #   run: npm run build
      - name: Run Tests
        run: npm test

  ## I could put the build step first, then use it in lint, test and deploy...
  # By default, jobs run in parallel, while steps run sequentially.
  # Thus you really don't want the deploy job to run as a
  # parallel job to the testing job. You could fix this by making
  # the deploy a step. Conversely, you could use the 'needs' keyword.
  build:
    needs: [lint, test]
    name: Build
    runs-on: ubuntu-latest
    strategy:
      matrix:
        node-version: [18.x]
    steps:
      - uses: actions/checkout@v3
      - name: Use Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v3
        with:
          node-version: ${{ matrix.node-version }}
      - name: Install Dependencies
        run: npm ci
      - name: Build Project
        run: npm run build
        # https://www.udemy.com/course/github-actions-the-complete-guide/learn/lecture/34139932#overview
      - name: Upload artifacts
        uses: actions/upload-artifact@v3
        with:
          name: dist # dist-files
          path: dist

  deploy:
    needs: build
    name: Deploy
    runs-on: ubuntu-latest
    steps:
      - name: Deploy to AWS Beanstalk
        uses: actions/download-artifact@v3
        with:
          name: dist # Corresponds to the upload name
      - name: List dist artifact contents (test)
        run: ls
        # run: echo "Deploying to AWS Beanstalk..."
        # https://docs.github.com/en/actions/learn-github-actions/contexts
      - name: Bonus -  output context of github
        run: echo "${{ toJSON(github) }}"
